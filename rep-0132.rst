REP: 132
Title: Rogue catkin packages
Author: William Woodall, Thibault Kruse
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 15-Dec-2012
Post-History:


Abstract
========

This REP describes extensions to catkin to allow projects to be build
within a catkin workspace but isolated from the catkin cmake process.

Motivation
==========

Catkin defines a catkin package to be a folder containing a
package.xml file satisfying the catkin syntax and A CMakeFile.txt.
Catkin provides cmake macros and naming / parameter rules to follow in
the CMakelists.txt, but this is voluntary. However, not using the
catkin macros or not obeying the rules however causes packages not to
produce build output that is compliant with catkin devel space layout,
and may even break the build of several packages in the catkin
workspace, due to the lack of cmake isolation between catkin projects.

On the other hand several libraries inthe ROS ecosystem have a complex
CMakeLists.txt setup, and some maintainers may be reluctant to maintain
a catkin-compliant CMakeLists.txt.

This introduces the notion of a rogue catkin package. Such a package
has a package.xml file, but does not follow any convention about the
CMakeLists.txt.

The first packages to be included like this are libraries having no
dependencies to catkin packages, like flann, kdl, opencv, pcl.

Specification
=============

The REP introduces a new syntax element to use in the exports section
of the package.xml:
<build_type>catkin(default)|cmake</build_type>

Catkin wil use the value of this tag to determine how to treat a
package.  Currently only two values are defined, "catkin" and "cmake",
but further build types may be added later (possible examples could
be make, autotools, rosbuild).

TODO: more details on the build chain invocation
.. TODO: Copied from meeting notes
        The flow would be:
            catkin_make_prerequisites (no target passing, flags go through)
            catkin_make
                now things are built into devel
            catkin_make_prerequisites --install
            catkin_make install
                now everything is installed into the install space



Rationale
=========

The build process catkin establishes bulk-processes all catkin
projects within the same workspace folder as if they were part of a
single cmake project. This design was chosen to speed up the
configuration and build processes, and to allow for a single build
space to allow easy cross-compilation. Rules exist for developers to
follow to reduce the risk of undesired cmake namespace collisions
between catkin packages (Some namespace collisions are desired to
detect conflicts early that have to be resolved anyway).

Catkin also defines a devel space which acts like an install space. By
complying to catkin rules for CMakeLists.txt, developers ensure that a
catkin package can be deployed to a devel space properly. The
develspace artifacts are generated by invoking the "make" command,
with the default target (no 'install' necessary).

A rogue catkin package does not follow catkin rules, as such it may
cause undesired cmake namespace collisions and not produce a valid
devel space layout.

Rogue catkin projects can be supported by invoking a custom build tool
and installing to the catkin devel space or the catkin install space.

Several possibilities exist for the embedding of rogue catkin packages
with custom build tools in a catkin process:

1. Build, configure and install rogue catkin projects during the catkin processes:

 a. Build all rogue packages before proper catkin packages
 b. Build all rogue packages after proper catkin packages
 c. Invoke custom build tools as part of the catkin make command (but
    not in the same cmake process)

2. Build and configure rogue catkin projects outside the catkin processes

Solution 2. means that a separate command exists that the user has to
invoke to configure, build or install rogue catkin projects.


TODO: analysis of alternatives
.. TODO: Explain why all of solution 1 is not possible



References
==========




Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
