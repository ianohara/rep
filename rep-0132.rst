REP: 132
Title: Rogue catkin packages
Author: William Woodall, Thibault Kruse
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 15-Dec-2012
Post-History:


Abstract
========

This REP describes extensions to catkin to allow isolated builds of
packages and in that process also build of plain cmake projects.

Motivation
==========

Catkin defines a catkin package to be a folder containing a
package.xml file satisfying the catkin syntax and a CMakeList.txt.

Catkin provides cmake macros and variables, in particular the
catkin_package() macro, which performs necessary steps for a catkin
package to be build successfully in the catkin build process.  This
relates to the configure process of a package also generating suitable
configuration files for dependent packages, as well as placing
suitable build artifacts in the so called devel space.

However it is technically feasible to create a catkin package that
does not use the provided catkin cmake macros or variables. The
CMakeLists.txt then defines a build process according to e.g. plain
cmake rules. Such a project which is not compliant with catkin breaks
the default catkin build process (mainly due to the lack of
catkin-generated cmake configuration file, and due to the absence of
valid devel space files).

Several libraries in the ROS ecosystem have a complex CMakeLists.txt
setup, and some maintainers may be reluctant to maintain a
catkin-compliant CMakeLists.txt.

This introduces the notion of a rogue catkin package. Such a package
has a package.xml file, but does not follow any convention about the
CMakeLists.txt. This REP defines basic support for an alternative
build process that can also include such rogue catkin packages. This
measure is a workaround and not currently intended for the majority of
catkin users. Current caveats are very low speed, missing features in
the devel space, and a confusing folder layout. The target audience
are users who want to build core ros packages from source, rather than
using pre-packaged distributions.

The first packages to be included as rogue catkin packages like this
are libraries like flann, kdl, opencv, pcl.

Specification
=============

The REP introduces a new syntax element to use in the exports section
of the package.xml:
<build_type>catkin(default)|cmake</build_type>

Catkin wil use the value of this tag to determine how to treat a
package.  Currently only two values are defined, "catkin" and "cmake",
but further build types may be added later (possible examples could be
make, autotools, rosbuild). "catkin" is the default value for this
property that will be assumed in the absence of the tag.

Having a package with a different build_type than "catkin" in the
catkin workspace will make the catkin build fail. Instead, the user
will have to invoke a new command "catkin_build_isolated", which
performs the build of all workspace projects in a different way catkin
usually does. Each catkin package will be build using an isolated make
invocation. This is necessary as rogue catkin packages do not act
compliantly within the configuration process (they do not generate
catkin-compliant configuration files during configuration so that
other packages could depend on them after configuration).

.. TODO: Explain how rogue packages and isolated catkin packages
   behave with respect to build space, devel space and install space.

Rationale
=========

The build process catkin establishes bulk-processes all catkin
projects within the same workspace folder as if they were part of a
single cmake project. This design was chosen to speed up the
configuration and build processes, and to allow for a single build
space to allow easy cross-compilation. Rules exist for developers to
follow to reduce the risk of undesired cmake namespace collisions
between catkin packages (Some namespace collisions are desired to
detect conflicts early that have to be resolved anyway).

Catkin also defines a devel space which acts like an install space in
many respects. By complying to catkin rules for CMakeLists.txt,
developers ensure that a catkin package can be deployed to a devel
space properly. The devel space artifacts are generated by invoking
the "make" command, with the default target (no 'install' necessary).

A rogue catkin package does not use catkin macros, so during it's
configuration process it does not generate files for dependent
packages to depend on it. This breaks the bulk-processing approach of
the default catkin build process.

Instead, rogue catkin projects can be supported by dropping the bulk
processing approach for an isolated build approach. This configures
and builds each package before configuring and building dependent
packages.

References
==========


Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
