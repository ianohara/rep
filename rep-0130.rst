REP: 130
Title: Separation of environment and source tree tools
Author: Tully Foote <tfoote@willowgarage.com>, Dirk Thomas <dthomas@willowgarage.com>, Thibault Kruse <kruset@in.tum.de>, William Woodall <wwoodall@willowgarage.com>
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 09-Nov-2012
Post-History:


Abstract
========

This REP defines the redesign of the rosinstall/rosws [1]_ tools for
catkin [2]_ workspaces, into two new commands, called wstool and
catkin_make.

Specification
=============

For catkin workspaces in ROS groovy, the rosws command will be
replaced by a similar command that mirrors rosws syntax and
functionality the same except for the management of the workspace
environment, which included the generation of setup.*sh files and
workspace specific information in the rosinstall file.

There will be a new command as part of the catkin ecosystem called
catkin_make, this one creates a folder structure as given in REP128.

wstool commands and options will be those of rosws:
wstool init: same as rosws init, but wstool has no --catkin and no --cmake-prefix-path option, also does not generate setup files.

The following commands retain their options and semantics from rosws:
wstool update
wstool diff
wstool status
wstool info
wstool set
wstool merge

there is no equivalent command for rosws regenerate.

The wstool command will not use the ROS_WORKSPACE environment that
rosws uses to allow manipulations of the workspace from anywhere in
the filesystem with workspace-relative paths. The wstool context will
be the first folder in the current path containing a wstool marker
file (.rosinstall).

This means the following use-case will not work::

  cd ~/catkin_ws/build
  make
  wstool update some_package
  make

instead the user will have to cd to the respective package or the
source folder for the wstool update operation. This is due to catkin
not defining an environment variable with a single folder to use as
workspace [3]_. A discussion of alternatives can be found in the reference.
This equally means that tab completion for rosws
of relative paths will only work from within the wstool context.

The catkin_make command has this syntax:
catkin_make init [PATH]: create a REP128 compatible folder structure in PATH or current folder.
This also involves creating environment setup file setup.*sh as specified in REP128.

Motivation
==========

Early ROS releases shipped with the ``rosinstall`` tool, which
provided communication with severeal SCMs, maintenance of a folder
tree, creation of a build and runtime environment (via the ROS_PACKAGE_PATH).

With the migration to catkin, the functionality of rosws to search for
a ROS stack and generate a setup.sh file that sets ROS environment variables
is not required anymore, but instead is confusing.

As a workaround, a special option for rosinstall and rosws has been added
to rosinstall / rosws with the release of ROS fuerte:

rosinstall --catkin ...
rosws init --catkin ...
rosws regenerate --catkin ...

The --catkin option suppresses generation of setup.*sh files, and
instead generates a CMakeLists.txt.

With this option the user always has to remember to call the --catkin
option, else setup.*sh files would be generated, which could be confusing.
While there is no harm, users can be expected to be confused.

Therefore, differently named commands will be used for each kind of workspace,
providing a clearer separation of concerns with the tools.

The new tools can also later be extended to better support
the different contraints of catkin workspaces without compromising the simplicity
and robustness which currnetly exist in rosws/rosinstall.

Also this problem reveals the general problem of mixing source
management with setting up an environment. While rosinstall allowed
setting up a workspace with just a single command, this design made
it hard for rosinstall to support several ROS distributions with ever
changing environment properties.

Therefore, the rosws replacement for catkin workspaces will not offer
any environment generation capabilities (setup.sh and similar), but merely
maintain a single declarative file with source projects and the file tree.

Environment tools may use the file syntax or library functions to reason
about the source tree and generate an environment accordingly.

Rationale
=========

REP128 drafts a model workspace for usage with catkin.

This is the recommended layout for development::

 workspace_folder/        --WORKSPACE
   src/                   --SOURCE SPACE
     CMakeLists.txt       --This is symlinked to catkin/cmake/toplevel.cmake
   build/                 --BUILD SPACE
     CATKIN_IGNORE        --Marking the folder to be ignored when crawling for packages
   devel/                 --DEVEL SPACE
     .catkin              --Marking the folder as a development space (the file contains a semicolon separated list of Source space paths)
     env.bash
     setup.bash
     setup.sh
     setup.zsh

Setting up this workspace manually is tedious and error-prone. The
catkin_make tool will create this structure, possibly by invoking
other tools such as cmake. The implementation details of catkin_make
are not part of this REP.

wstool will act only on the src folder::

 workspace_folder/        --WORKSPACE
   src/                   --SOURCE SPACE
     CMakeLists.txt       --This is symlinked to catkin/cmake/toplevel.cmake
     .rosinstall

wstool init will create a .rosinstall file which will act the same way
as for the rosinstall tool before.

The wstool commands will affect this .rosinstall file and subfolders of the src folder.

Using .rosinstall as marker file for wstool may cause some confusion
for users when creating rosbuild workspaces. Those will not get useful
results when trying to init with a wstool workspace, since they should
instead init with a catkin devel space or install space.

However using a differently named marker file may equally be difficult
to learn, and to use while switching between rosbuild and catkin
workspaces. Also some users might prefer to use just one command for
both kinds of workspaces since rosws and wstools remain largely
equivalent.

Alternatives
------------

- Keep --catkin option

Not desirable because of user confusion. When a user forgets to pass
that option during a rosinstall, rosws init or rosws merge call,
setup.*sh files will be generated that have no purpose.

- change rosws default behavior to be setup.*sh agnostic

In theory rosws could be changed to never generate anything else than a
.rosinstall file. For the rosbuild case, this would mean we'd need a
small helper script to create those files, like
ros_create_env [PATH]. This might also have benefits, but would mean
that plenty of tutorials on the web would have to change their installation
instructions.

- Automatic detection of workspace type

Another possibility would be for rosws/rosinstall to automatically
detect whether the workspace to be created/modified is a rosbuild
workspace or a catkin workspace.

Currently the following hints exists:

The usage of a post-fuerte ROS_ROOT indicates a probability of this being
a catkin workspace. However the same holds for rosbuild workspaces in Groovy.

The presence of a CMakeLists.txt file (in particular referring to catkin)
indicates this is to be a catkin workspace. However users might create
that file after calling rosws init.


Backwards Compatibility
=======================

The rosws command remains functionally identical and will continue to be maintained.

Reference Implementation
========================

The Groovy distribution of ROS will provide two separate tools
following the guidelines of this REP.


References and Footnotes
========================

.. [1] rosinstall
  (http://www.ros.org/wiki/rosinstall)

.. [2] catkin
  (http://www.ros.org/wiki/catkin)

.. [3] ROS_WORKSPACE with catkin
  (https://github.com/ros/catkin/issues/249)

Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:

